type EthMainnetService = variant {
  Alchemy;
  BlockPi;
  Cloudflare;
  PublicNode;
  Ankr;
};
type GetTransactionReceiptResult = variant {
  Ok : opt TransactionReceipt;
  Err : RpcError;
};
type HttpHeader = record { value : text; name : text };
type HttpOutcallError = variant {
  IcError : record { code : RejectionCode; message : text };
  InvalidHttpJsonRpcResponse : record {
    status : nat16;
    body : text;
    parsingError : opt text;
  };
};
type JsonRpcError = record { code : int64; message : text };
type L2MainnetService = variant { Alchemy; BlockPi; PublicNode; Ankr };
type LogEntry = record {
  transactionHash : opt text;
  blockNumber : opt nat;
  data : text;
  blockHash : opt text;
  transactionIndex : opt nat;
  topics : vec text;
  address : text;
  logIndex : opt nat;
  removed : bool;
};
type MultiGetTransactionReceiptResult = variant {
  Consistent : GetTransactionReceiptResult;
  Inconsistent : vec record { RpcService; GetTransactionReceiptResult };
};
type ProviderError = variant {
  TooFewCycles : record { expected : nat; received : nat };
  MissingRequiredProvider;
  ProviderNotFound;
  NoPermission;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : float64; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : SendRawTransactionResult; Err : text };
type Result_3 = variant { Ok : MultiGetTransactionReceiptResult; Err : text };
type RpcApi = record { url : text; headers : opt vec HttpHeader };
type RpcError = variant {
  JsonRpcError : JsonRpcError;
  ProviderError : ProviderError;
  ValidationError : ValidationError;
  HttpOutcallError : HttpOutcallError;
};
type RpcService = variant {
  EthSepolia : L2MainnetService;
  BaseMainnet : L2MainnetService;
  Custom : RpcApi;
  OptimismMainnet : L2MainnetService;
  ArbitrumOne : L2MainnetService;
  EthMainnet : EthMainnetService;
  Chain : nat64;
  Provider : nat64;
};
type SendRawTransactionResult = variant {
  Ok : SendRawTransactionStatus;
  Err : RpcError;
};
type SendRawTransactionStatus = variant {
  Ok : opt text;
  NonceTooLow;
  NonceTooHigh;
  InsufficientFunds;
};
type TransactionReceipt = record {
  to : text;
  status : nat;
  transactionHash : text;
  blockNumber : nat;
  from : text;
  logs : vec LogEntry;
  blockHash : text;
  "type" : text;
  transactionIndex : nat;
  effectiveGasPrice : nat;
  logsBloom : text;
  contractAddress : opt text;
  gasUsed : nat;
};
type ValidationError = variant {
  CredentialPathNotAllowed;
  HostNotAllowed : text;
  CredentialHeaderNotAllowed;
  UrlParseError : text;
  Custom : text;
  InvalidHex : text;
};
service : {
  fetch_crypto_prices_and_calculate_ethereum : (float64) -> (Result);
  generate_key_pair : () -> (Result_1);
  send_eth : (text, float64, text) -> (Result_2);
  verify_trans : (text, text, text, text) -> (Result_3);
}
